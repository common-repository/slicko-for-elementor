<?php
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 *
 * Retrieving the values:
 * Include On = get_post_meta( get_the_ID(), 'slicko_include-on', true )
 * Include Pages = get_post_meta( get_the_ID(), 'slicko_include-pages', true )
 * Exclude On = get_post_meta( get_the_ID(), 'slicko_exclude-on', true )
 * Exclude Pages = get_post_meta( get_the_ID(), 'slicko_exclude-pages', true )
 */
class Slicko_Include_Exclude {
    private $config = '{"title":"Include Exclude Rules","prefix":"slicko_","domain":"slicko-ts","class_name":"Slicko_Include_Exclude","context":"normal","priority":"high","cpt":"slicko_header, slicko_footer","fields":[{"type":"select","label":"Include On","options":"none : None\r\nentire_website : Entire Website\r\nspecific_page : Specific Page","id":"slicko_include_on"},{"type":"pages","label":"Include Pages","options":"all_pages","id":"slicko_include_pages"},{"type":"select","label":"Exclude On","options":"none : None\r\nentire_website : Entire Website\r\nspecific_page : Specific Page","id":"slicko_exclude_on"},{"type":"pages","label":"Exclude Pages","options":"all_pages","id":"slicko_exclude_pages"}]}';
    public function __construct() {
        $this->config = json_decode( $this->config, true );
        $this->process_cpts();
        add_action( 'add_meta_boxes', [$this, 'add_meta_boxes'] );
        add_action( 'admin_head', [$this, 'admin_head'] );
        add_action( 'save_post', [$this, 'save_post'] );
    }
    public function process_cpts() {
        if ( !empty( $this->config['cpt'] ) ) {
            if ( empty( $this->config['post-type'] ) ) {
                $this->config['post-type'] = [];
            }
            $parts                     = explode( ',', $this->config['cpt'] );
            $parts                     = array_map( 'trim', $parts );
            $this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
        }
    }
    public function add_meta_boxes() {
        foreach ( $this->config['post-type'] as $screen ) {
            add_meta_box(
                sanitize_title( $this->config['title'] ),
                $this->config['title'],
                [$this, 'add_meta_box_callback'],
                $screen,
                $this->config['context'],
                $this->config['priority']
            );
        }
    }
    public function save_post( $post_id ) {
        foreach ( $this->config['fields'] as $field ) {
            if ( isset( $_POST[$field['id']] ) ) {
                update_post_meta( $post_id, $field['id'], $_POST[$field['id']] );
            }
        }
    }
    public function admin_head() {
        global $typenow;
        if ( in_array( $typenow, $this->config['post-type'] ) ) {
            ?><script>
				jQuery.noConflict();
				(function($) {
					$(function() {
                        var incSelected = $('#slicko_include_on').children('option:selected').attr('value')
                        var exSelected = $('#slicko_exclude_on').children('option:selected').attr('value')
                        if('specific_page' == incSelected ){
                            $('#slicko_include_pages').parent('td').parent('tr').show();
                        }else{
                            $('#slicko_include_pages').parent('td').parent('tr').hide();
                        }
                        if('specific_page' == exSelected ){
                            $('#slicko_exclude_pages').parent('td').parent('tr').show();
                        }else{
                            $('#slicko_exclude_pages').parent('td').parent('tr').hide();
                        }
						$(document).on('change', '#slicko_include_on', function(e) {
							e.preventDefault();
                            var incSelected = $(this).children('option:selected').attr('value')
                            if('specific_page' == incSelected ){
                                $('#slicko_include_pages').parent('td').parent('tr').show();
                            }else{
                                $('#slicko_include_pages').parent('td').parent('tr').hide();
                            }
						});
						$(document).on('change', '#slicko_exclude_on', function(e) {
							e.preventDefault();
                            var exSelected = $(this).children('option:selected').attr('value')
                            if('specific_page' == exSelected ){
                                $('#slicko_exclude_pages').parent('td').parent('tr').show();
                            }else{
                                $('#slicko_exclude_pages').parent('td').parent('tr').hide();
                            }
						});
					});
				})(jQuery);
			</script><?php
}
    }
    public function add_meta_box_callback() {
        $this->fields_table();
    }
    private function fields_table() {
        ?><table class="form-table" role="presentation">
			<tbody><?php
foreach ( $this->config['fields'] as $field ) {
            ?><tr>
						<th scope="row"><?php $this->label( $field );?></th>
						<td><?php $this->field( $field );?></td>
					</tr><?php
}
        ?></tbody>
		</table><?php
}
    private function label( $field ) {
        switch ( $field['type'] ) {
        default:
            printf(
                '<label class="" for="%s">%s</label>',
                $field['id'], $field['label']
            );
        }
    }
    private function field( $field ) {
        switch ( $field['type'] ) {
        case 'select':
            $this->select( $field );
            break;
        case 'pages':
            $this->pages( $field );
            break;
        default:
            $this->input( $field );
        }
    }
    private function input( $field ) {
        printf(
            '<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
            isset( $field['class'] ) ? $field['class'] : '',
            $field['id'], $field['id'],
            isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
            $field['type'],
            $this->value( $field )
        );
    }
    private function select( $field ) {
        printf(
            '<select id="%s" name="%s">%s</select>',
            $field['id'], $field['id'],
            $this->select_options( $field )
        );
    }
    private function pages( $field ) {
        printf(
            '<select  class="slicko_select_pages" id="%s" name="%s[]" multiple>%s</select>',
            $field['id'], $field['id'],
            $this->pages_options( $field['id'] )
        );
    }
    private function select_selected( $field, $current ) {
        $value = $this->value( $field );
        if ( $value === $current ) {
            return 'selected';
        }
        return '';
    }
    private function select_options( $field ) {
        $output  = [];
        $options = explode( "\r\n", $field['options'] );
        $i       = 0;
        foreach ( $options as $option ) {
            $pair     = explode( ':', $option );
            $pair     = array_map( 'trim', $pair );
            $output[] = sprintf(
                '<option %s value="%s"> %s</option>',
                $this->select_selected( $field, $pair[0] ),
                $pair[0], $pair[1]
            );
            $i++;
        }
        return implode( '<br>', $output );
    }
    private function pages_options( $key ) {
        $all_pages = get_posts( [
            'post_type'      => 'page',
            'posts_per_page' => -1,
        ] );
        $output = [];
        $field  = get_post_meta( get_the_ID(), $key, true );
        if ( $all_pages ) {
            foreach ( $all_pages as $item ) {
                $seleted = $field && in_array( $item->ID, $field ) ? 'selected' : '';
                $output[] = sprintf( '<option value="%s" %s>%s</option>', $item->ID, $seleted, get_the_title( $item->ID ) );
            }
        }
        return implode( '</br>', $output );
    }
    private function value( $field ) {
        global $post;
        if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
            $value = get_post_meta( $post->ID, $field['id'], true );
        } else if ( isset( $field['default'] ) ) {
            $value = $field['default'];
        } else {
            return '';
        }
        return str_replace( '\u0027', "'", $value );
    }
}
new Slicko_Include_Exclude;